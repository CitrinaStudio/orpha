// Generated by Haxe 3.4.3
#ifndef INCLUDED_markov_util_StringExtensions
#define INCLUDED_markov_util_StringExtensions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(markov,util,StringExtensions)

namespace markov{
namespace util{


class HXCPP_CLASS_ATTRIBUTES StringExtensions_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef StringExtensions_obj OBJ_;
		StringExtensions_obj();

	public:
		enum { _hx_ClassId = 0x16d8343f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="markov.util.StringExtensions")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"markov.util.StringExtensions"); }

		hx::ObjectPtr< StringExtensions_obj > __new() {
			hx::ObjectPtr< StringExtensions_obj > __this = new StringExtensions_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< StringExtensions_obj > __alloc(hx::Ctx *_hx_ctx) {
			StringExtensions_obj *__this = (StringExtensions_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StringExtensions_obj), false, "markov.util.StringExtensions"));
			*(void **)__this = StringExtensions_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~StringExtensions_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("StringExtensions","\x65","\x14","\xa4","\xfd"); }

		static ::String reverse(::String str);
		static ::Dynamic reverse_dyn();

		static ::String repeat(::String str,int times);
		static ::Dynamic repeat_dyn();

		static bool contains(::String str,::String substr);
		static ::Dynamic contains_dyn();

		static ::String capitalize(::String str);
		static ::Dynamic capitalize_dyn();

};

} // end namespace markov
} // end namespace util

#endif /* INCLUDED_markov_util_StringExtensions */ 
