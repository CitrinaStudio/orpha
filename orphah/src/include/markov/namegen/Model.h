// Generated by Haxe 3.4.3
#ifndef INCLUDED_markov_namegen_Model
#define INCLUDED_markov_namegen_Model

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(markov,namegen,Model)

namespace markov{
namespace namegen{


class HXCPP_CLASS_ATTRIBUTES Model_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Model_obj OBJ_;
		Model_obj();

	public:
		enum { _hx_ClassId = 0x25d5a178 };

		void __construct(::Array< ::String > data,int order,Float prior,::Array< ::String > alphabet);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="markov.namegen.Model")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"markov.namegen.Model"); }
		static hx::ObjectPtr< Model_obj > __new(::Array< ::String > data,int order,Float prior,::Array< ::String > alphabet);
		static hx::ObjectPtr< Model_obj > __alloc(hx::Ctx *_hx_ctx,::Array< ::String > data,int order,Float prior,::Array< ::String > alphabet);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Model_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Model","\x89","\x93","\x85","\x9f"); }

		static int countMatches(::Array< ::String > arr,::String v);
		static ::Dynamic countMatches_dyn();

		static int selectIndex(::Array< Float > chain);
		static ::Dynamic selectIndex_dyn();

		int order;
		Float prior;
		::Array< ::String > alphabet;
		 ::haxe::ds::StringMap observations;
		 ::haxe::ds::StringMap chains;
		::String generate(::String context);
		::Dynamic generate_dyn();

		void retrain(::Array< ::String > data);
		::Dynamic retrain_dyn();

		void train(::Array< ::String > data);
		::Dynamic train_dyn();

		void buildChains();
		::Dynamic buildChains_dyn();

};

} // end namespace markov
} // end namespace namegen

#endif /* INCLUDED_markov_namegen_Model */ 
