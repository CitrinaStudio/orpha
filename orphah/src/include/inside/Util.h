// Generated by Haxe 3.4.3
#ifndef INCLUDED_inside_Util
#define INCLUDED_inside_Util

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Attribute)
HX_DECLARE_CLASS1(inside,Util)

namespace inside{


class HXCPP_CLASS_ATTRIBUTES Util_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Util_obj OBJ_;
		Util_obj();

	public:
		enum { _hx_ClassId = 0x0ae38242 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="inside.Util")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"inside.Util"); }

		hx::ObjectPtr< Util_obj > __new() {
			hx::ObjectPtr< Util_obj > __this = new Util_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Util_obj > __alloc(hx::Ctx *_hx_ctx) {
			Util_obj *__this = (Util_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Util_obj), false, "inside.Util"));
			*(void **)__this = Util_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Util_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Util","\x22","\x84","\x87","\x38"); }

		static void clear();
		static ::Dynamic clear_dyn();

		static void cprint(::String msg, ::Attribute bold_include, ::Attribute fg, ::Attribute bg);
		static ::Dynamic cprint_dyn();

		static ::cpp::VirtualArray get_spell_effect(::String spell,Float enemy_danger_coeff);
		static ::Dynamic get_spell_effect_dyn();

		static int inputInt(::String msg);
		static ::Dynamic inputInt_dyn();

		static ::String inputString(::String msg);
		static ::Dynamic inputString_dyn();

};

} // end namespace inside

#endif /* INCLUDED_inside_Util */ 
