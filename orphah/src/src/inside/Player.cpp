// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_HaxeLow
#include <HaxeLow.h>
#endif
#ifndef INCLUDED_HaxeLowDisk
#include <HaxeLowDisk.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_inside_Player
#include <inside/Player.h>
#endif
#ifndef INCLUDED_inside_Util
#include <inside/Util.h>
#endif
#ifndef INCLUDED_orphadb_TablePlayer
#include <orphadb/TablePlayer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4e5d5af090b3f1fb_14_new,"inside.Player","new",0xf7d6a425,"inside.Player.new","inside/Player.hx",14,0x3d625eca)
HX_LOCAL_STACK_FRAME(_hx_pos_4e5d5af090b3f1fb_44_get_player_params,"inside.Player","get_player_params",0x6dd9cd80,"inside.Player.get_player_params","inside/Player.hx",44,0x3d625eca)
HX_LOCAL_STACK_FRAME(_hx_pos_4e5d5af090b3f1fb_48_main,"inside.Player","main",0xe34cb0d4,"inside.Player.main","inside/Player.hx",48,0x3d625eca)
namespace inside{

void Player_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_4e5d5af090b3f1fb_14_new)
HXLINE(  15)		 ::HaxeLow db =  ::HaxeLow_obj::__alloc( HX_CTX ,HX_("db.json",18,b1,32,30),null());
HXLINE(  16)		::Array< ::Dynamic> players = db->col(hx::ClassOf< ::orphadb::TablePlayer >());
HXLINE(  17)		 ::Dynamic player_params =  ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("pName",db,96,b9,b0),HX_("",00,00,00,00))
            			->setFixed(1,HX_("pHp",98,3b,55,00),(int)0)
            			->setFixed(2,HX_("pMp",f3,3f,55,00),(int)0)
            			->setFixed(3,HX_("pCoordinate",08,a7,a9,36), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),(int)0)
            				->setFixed(1,HX_("y",79,00,00,00),(int)0)))
            			->setFixed(4,HX_("pAge",2f,92,39,4a),(int)0)
            			->setFixed(5,HX_("Ability",8a,89,b2,7a), ::Dynamic(hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("pCha",8c,17,3b,4a),(int)0)
            				->setFixed(1,HX_("pCon",b2,1d,3b,4a),(int)0)
            				->setFixed(2,HX_("pDex",47,d7,3b,4a),(int)0)
            				->setFixed(3,HX_("pInt",5f,aa,3f,4a),(int)0)
            				->setFixed(4,HX_("pStr",21,46,47,4a),(int)0)
            				->setFixed(5,HX_("pWis",91,45,4a,4a),(int)0))));
HXLINE(  21)		player_params->__SetField(HX_("pName",db,96,b9,b0),::inside::Util_obj::inputString(HX_("Input your name: ",48,7f,0a,63)),hx::paccDynamic);
HXLINE(  23)		player_params->__SetField(HX_("pAge",2f,92,39,4a),::inside::Util_obj::inputInt(HX_("Input your age: ",6e,23,5b,b0)),hx::paccDynamic);
HXLINE(  25)		 ::haxe::ds::StringMap _g3 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  25)		{
HXLINE(  25)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  25)			_g->set(HX_("hp",08,5b,00,00),(int)5);
HXDLIN(  25)			_g->set(HX_("mp",63,5f,00,00),(int)0);
HXDLIN(  25)			_g->set(HX_("str",b1,a8,57,00),(int)5);
HXDLIN(  25)			_g->set(HX_("dex",d7,39,4c,00),(int)1);
HXDLIN(  25)			_g->set(HX_("con",42,80,4b,00),(int)1);
HXDLIN(  25)			_g->set(HX_("inte",96,44,bb,45),(int)1);
HXDLIN(  25)			_g->set(HX_("wis",21,a8,5a,00),(int)1);
HXDLIN(  25)			_g->set(HX_("cha",1c,7a,4b,00),(int)1);
HXDLIN(  25)			_g3->set(HX_("Warrior",a2,dd,c1,d9),_g);
            		}
HXDLIN(  25)		{
HXLINE(  25)			 ::haxe::ds::StringMap _g1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  25)			_g1->set(HX_("hp",08,5b,00,00),(int)4);
HXDLIN(  25)			_g1->set(HX_("mp",63,5f,00,00),(int)1);
HXDLIN(  25)			_g1->set(HX_("str",b1,a8,57,00),(int)1);
HXDLIN(  25)			_g1->set(HX_("dex",d7,39,4c,00),(int)5);
HXDLIN(  25)			_g1->set(HX_("con",42,80,4b,00),(int)1);
HXDLIN(  25)			_g1->set(HX_("inte",96,44,bb,45),(int)1);
HXDLIN(  25)			_g1->set(HX_("wis",21,a8,5a,00),(int)1);
HXDLIN(  25)			_g1->set(HX_("cha",1c,7a,4b,00),(int)1);
HXDLIN(  25)			_g3->set(HX_("Roge",3b,13,88,36),_g1);
            		}
HXDLIN(  25)		{
HXLINE(  25)			 ::haxe::ds::StringMap _g2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  25)			_g2->set(HX_("hp",08,5b,00,00),(int)2);
HXDLIN(  25)			_g2->set(HX_("mp",63,5f,00,00),(int)5);
HXDLIN(  25)			_g2->set(HX_("str",b1,a8,57,00),(int)1);
HXDLIN(  25)			_g2->set(HX_("dex",d7,39,4c,00),(int)1);
HXDLIN(  25)			_g2->set(HX_("con",42,80,4b,00),(int)1);
HXDLIN(  25)			_g2->set(HX_("inte",96,44,bb,45),(int)1);
HXDLIN(  25)			_g2->set(HX_("wis",21,a8,5a,00),(int)5);
HXDLIN(  25)			_g2->set(HX_("cha",1c,7a,4b,00),(int)1);
HXDLIN(  25)			_g3->set(HX_("Mage",92,62,2f,33),_g2);
            		}
HXDLIN(  25)		player_params->__SetField(HX_("pHp",98,3b,55,00),( (int)(_g3->get(HX_("Mage",92,62,2f,33)).StaticCast<  ::haxe::ds::StringMap >()->get(HX_("hp",08,5b,00,00))) ),hx::paccDynamic);
HXLINE(  27)		::Sys_obj::print(player_params);
HXLINE(  30)		bool ability_is_ok = true;
HXLINE(  31)		while(!(ability_is_ok)){
            		}
HXLINE(  37)		players->push( ::orphadb::TablePlayer_obj::__alloc( HX_CTX ,player_params));
HXLINE(  38)		db->save();
HXLINE(  40)		this->params = player_params;
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x59f2be3d;
}

 ::Dynamic Player_obj::get_player_params(){
            	HX_STACKFRAME(&_hx_pos_4e5d5af090b3f1fb_44_get_player_params)
HXDLIN(  44)		return this->params;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_player_params,return )

void Player_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_4e5d5af090b3f1fb_48_main)
HXDLIN(  48)		 ::inside::Player ooo =  ::inside::Player_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Player_obj,main,(void))


hx::ObjectPtr< Player_obj > Player_obj::__new() {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "inside.Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(params,"params");
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return hx::Val( params ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_player_params") ) { return hx::Val( get_player_params_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Player_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { params=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Player_obj,params),HX_HCSTRING("params","\x46","\xfb","\x7a","\xed")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("get_player_params","\xfb","\xca","\x89","\x0c"),
	HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

static ::String Player_obj_sStaticFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	::String(null())
};

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("inside.Player","\xb3","\xad","\x06","\x7b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Player_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Player_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace inside
