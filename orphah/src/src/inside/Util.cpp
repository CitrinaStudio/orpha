// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ANSI
#include <ANSI.h>
#endif
#ifndef INCLUDED_Attribute
#include <Attribute.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_inside_Util
#include <inside/Util.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_48609b1ce9538970_13_clear,"inside.Util","clear",0x8623a373,"inside.Util.clear","inside/Util.hx",13,0xf93d0f89)
HX_LOCAL_STACK_FRAME(_hx_pos_48609b1ce9538970_22_cprint,"inside.Util","cprint",0x2f438844,"inside.Util.cprint","inside/Util.hx",22,0xf93d0f89)
HX_LOCAL_STACK_FRAME(_hx_pos_48609b1ce9538970_25_get_spell_effect,"inside.Util","get_spell_effect",0xf7b82beb,"inside.Util.get_spell_effect","inside/Util.hx",25,0xf93d0f89)
static const ::String _hx_array_data_08c081d4_3[] = {
	HX_("Iron",68,75,97,30),HX_("Ice",2b,bb,37,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_48609b1ce9538970_38_inputInt,"inside.Util","inputInt",0x515c24df,"inside.Util.inputInt","inside/Util.hx",38,0xf93d0f89)
HX_LOCAL_STACK_FRAME(_hx_pos_48609b1ce9538970_43_inputString,"inside.Util","inputString",0xc22fa6e1,"inside.Util.inputString","inside/Util.hx",43,0xf93d0f89)
namespace inside{

void Util_obj::__construct() { }

Dynamic Util_obj::__CreateEmpty() { return new Util_obj; }

void *Util_obj::_hx_vtable = 0;

Dynamic Util_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Util_obj > _hx_result = new Util_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Util_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0ae38242;
}

void Util_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_48609b1ce9538970_13_clear)
HXLINE(  14)		int answer_code = ::Sys_obj::command(HX_("cls",aa,7d,4b,00),null());
HXLINE(  16)		if ((answer_code == (int)127)) {
HXLINE(  17)			::Sys_obj::command(HX_("clear",8d,71,5b,48),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Util_obj,clear,(void))

void Util_obj::cprint(::String msg, ::Attribute bold_include, ::Attribute fg, ::Attribute bg){
            	HX_STACKFRAME(&_hx_pos_48609b1ce9538970_22_cprint)
HXDLIN(  22)		::String _hx_tmp = ::Std_obj::string(::ANSI_obj::set(fg,bg,bold_include));
HXDLIN(  22)		::String _hx_tmp1 = (_hx_tmp + (HX_("",00,00,00,00) + msg));
HXDLIN(  22)		::Sys_obj::println((_hx_tmp1 + ::Std_obj::string(::ANSI_obj::set(::Attribute_obj::DefaultForeground_dyn(),::Attribute_obj::DefaultBackground_dyn(),::Attribute_obj::BoldOff_dyn()))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Util_obj,cprint,(void))

::cpp::VirtualArray Util_obj::get_spell_effect(::String spell,Float enemy_danger_coeff){
            	HX_GC_STACKFRAME(&_hx_pos_48609b1ce9538970_25_get_spell_effect)
HXLINE(  26)		Float enemy_danger_coeff1 = ::Math_obj::abs(enemy_danger_coeff);
HXLINE(  28)		 ::haxe::ds::StringMap _g4 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  28)		{
HXLINE(  28)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  28)			_g->set(HX_("damage_bonus",8f,bb,5d,6e),(int)4);
HXDLIN(  28)			_g->set(HX_("spell_cost",84,bb,67,ea),(int)5);
HXDLIN(  28)			_g->set(HX_("min_player_coeff",28,f9,39,81),((Float).0));
HXDLIN(  28)			_g->set(HX_("category",fe,2a,6c,ad),HX_("Ice",2b,bb,37,00));
HXDLIN(  28)			_g4->set(HX_("Iceblast",ad,cc,2c,7b),_g);
            		}
HXDLIN(  28)		{
HXLINE(  28)			 ::haxe::ds::StringMap _g1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  28)			_g1->set(HX_("damage_bonus",8f,bb,5d,6e),(int)5);
HXDLIN(  28)			_g1->set(HX_("spell_cost",84,bb,67,ea),(int)6);
HXDLIN(  28)			_g1->set(HX_("min_player_coeff",28,f9,39,81),((Float).0));
HXDLIN(  28)			_g1->set(HX_("category",fe,2a,6c,ad),HX_("Fire",d6,ff,94,2e));
HXDLIN(  28)			_g4->set(HX_("Fireball",d5,84,51,af),_g1);
            		}
HXDLIN(  28)		{
HXLINE(  28)			 ::haxe::ds::StringMap _g2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  28)			_g2->set(HX_("damage_bonus",8f,bb,5d,6e),(int)6);
HXDLIN(  28)			_g2->set(HX_("spell_cost",84,bb,67,ea),(int)7);
HXDLIN(  28)			_g2->set(HX_("min_player_coeff",28,f9,39,81),((Float).0));
HXDLIN(  28)			_g2->set(HX_("category",fe,2a,6c,ad),HX_("Water",f7,87,52,58));
HXDLIN(  28)			_g4->set(HX_("Waterpillar",21,01,68,d7),_g2);
            		}
HXDLIN(  28)		{
HXLINE(  28)			 ::haxe::ds::StringMap _g3 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  28)			_g3->set(HX_("damage_bonus",8f,bb,5d,6e),(int)7);
HXDLIN(  28)			_g3->set(HX_("spell_cost",84,bb,67,ea),(int)8);
HXDLIN(  28)			_g3->set(HX_("min_player_coeff",28,f9,39,81),((Float).0));
HXDLIN(  28)			_g3->set(HX_("category",fe,2a,6c,ad),HX_("Iron",68,75,97,30));
HXDLIN(  28)			_g4->set(HX_("Ironfist",0c,1e,5e,cf),_g3);
            		}
HXDLIN(  28)		if (::Lambda_obj::has(::Array_obj< ::String >::fromData( _hx_array_data_08c081d4_3,2),_g4->get(spell).StaticCast<  ::haxe::ds::StringMap >()->get(HX_("category",fe,2a,6c,ad)))) {
HXLINE(  30)			Float count_block_action = ::Math_obj::PI;
HXDLIN(  30)			Float count_block_action1 = (count_block_action * (((Float)0.2) * ::Math_obj::random()));
HXLINE(  29)			int count_block_action2 = ::Math_obj::ceil((count_block_action1 * ::Math_obj::sqrt(enemy_danger_coeff1)));
HXLINE(  31)			::inside::Util_obj::cprint(((HX_("You block enemy action in ",7d,24,b9,9a) + count_block_action2) + HX_(" moves.",cc,c5,5b,ff)),::Attribute_obj::Bold_dyn(),::Attribute_obj::Blue_dyn(),::Attribute_obj::DefaultBackground_dyn());
HXLINE(  32)			return ::cpp::VirtualArray_obj::__new(2)->init(0,HX_("block_enemy_action",7f,a5,07,11))->init(1,count_block_action2);
            		}
            		else {
HXLINE(  34)			return ::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,(int)0);
            		}
HXLINE(  28)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Util_obj,get_spell_effect,return )

int Util_obj::inputInt(::String msg){
            	HX_STACKFRAME(&_hx_pos_48609b1ce9538970_38_inputInt)
HXLINE(  39)		::Sys_obj::print(msg);
HXLINE(  40)		return ::Std_obj::parseInt(::Sys_obj::_hx_stdin()->readLine());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Util_obj,inputInt,return )

::String Util_obj::inputString(::String msg){
            	HX_STACKFRAME(&_hx_pos_48609b1ce9538970_43_inputString)
HXLINE(  44)		::Sys_obj::print(msg);
HXLINE(  45)		return ::Sys_obj::_hx_stdin()->readLine();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Util_obj,inputString,return )


Util_obj::Util_obj()
{
}

bool Util_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cprint") ) { outValue = cprint_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"inputInt") ) { outValue = inputInt_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inputString") ) { outValue = inputString_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_spell_effect") ) { outValue = get_spell_effect_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Util_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Util_obj_sStaticStorageInfo = 0;
#endif

static void Util_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Util_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Util_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Util_obj::__mClass,"__mClass");
};

#endif

hx::Class Util_obj::__mClass;

static ::String Util_obj_sStaticFields[] = {
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("cprint","\xea","\x10","\xe0","\x5d"),
	HX_HCSTRING("get_spell_effect","\x11","\x40","\x88","\xba"),
	HX_HCSTRING("inputInt","\x05","\xa3","\xa8","\xc6"),
	HX_HCSTRING("inputString","\x7b","\x04","\x64","\x06"),
	::String(null())
};

void Util_obj::__register()
{
	hx::Object *dummy = new Util_obj;
	Util_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("inside.Util","\xd4","\x81","\xc0","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Util_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Util_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Util_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Util_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Util_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Util_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Util_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace inside
