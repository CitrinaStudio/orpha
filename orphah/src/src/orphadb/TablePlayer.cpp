// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_orphadb_TablePlayer
#include <orphadb/TablePlayer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0815dd45fe207986_5_new,"orphadb.TablePlayer","new",0xd5829917,"orphadb.TablePlayer.new","orphadb/Table.hx",5,0xf68a4b1b)
namespace orphadb{

void TablePlayer_obj::__construct( ::Dynamic player_params){
            	HX_STACKFRAME(&_hx_pos_0815dd45fe207986_5_new)
HXLINE(   7)		this->pName = ( (::String)(player_params->__Field(HX_("pName",db,96,b9,b0),hx::paccDynamic)) );
HXDLIN(   7)		this->pAge = ( (int)(player_params->__Field(HX_("pAge",2f,92,39,4a),hx::paccDynamic)) );
HXDLIN(   7)		this->pHp = ( (int)(player_params->__Field(HX_("pHp",98,3b,55,00),hx::paccDynamic)) );
HXDLIN(   7)		this->pMp = ( (int)(player_params->__Field(HX_("pMp",f3,3f,55,00),hx::paccDynamic)) );
HXDLIN(   7)		this->pStr = ( (int)( ::Dynamic(player_params->__Field(HX_("Ability",8a,89,b2,7a),hx::paccDynamic))->__Field(HX_("pStr",21,46,47,4a),hx::paccDynamic)) );
HXLINE(   9)		this->pDex = ( (int)( ::Dynamic(player_params->__Field(HX_("Ability",8a,89,b2,7a),hx::paccDynamic))->__Field(HX_("pDex",47,d7,3b,4a),hx::paccDynamic)) );
HXDLIN(   9)		this->pCon = ( (int)( ::Dynamic(player_params->__Field(HX_("Ability",8a,89,b2,7a),hx::paccDynamic))->__Field(HX_("pCon",b2,1d,3b,4a),hx::paccDynamic)) );
HXDLIN(   9)		this->pInt = ( (int)( ::Dynamic(player_params->__Field(HX_("Ability",8a,89,b2,7a),hx::paccDynamic))->__Field(HX_("pInt",5f,aa,3f,4a),hx::paccDynamic)) );
HXDLIN(   9)		this->pWis = ( (int)( ::Dynamic(player_params->__Field(HX_("Ability",8a,89,b2,7a),hx::paccDynamic))->__Field(HX_("pWis",91,45,4a,4a),hx::paccDynamic)) );
HXDLIN(   9)		this->pCha = ( (int)( ::Dynamic(player_params->__Field(HX_("Ability",8a,89,b2,7a),hx::paccDynamic))->__Field(HX_("pCha",8c,17,3b,4a),hx::paccDynamic)) );
            	}

Dynamic TablePlayer_obj::__CreateEmpty() { return new TablePlayer_obj; }

void *TablePlayer_obj::_hx_vtable = 0;

Dynamic TablePlayer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TablePlayer_obj > _hx_result = new TablePlayer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TablePlayer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b399bef;
}


TablePlayer_obj::TablePlayer_obj()
{
}

void TablePlayer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TablePlayer);
	HX_MARK_MEMBER_NAME(pName,"pName");
	HX_MARK_MEMBER_NAME(pAge,"pAge");
	HX_MARK_MEMBER_NAME(pClass,"pClass");
	HX_MARK_MEMBER_NAME(pHp,"pHp");
	HX_MARK_MEMBER_NAME(pMp,"pMp");
	HX_MARK_MEMBER_NAME(pStr,"pStr");
	HX_MARK_MEMBER_NAME(pDex,"pDex");
	HX_MARK_MEMBER_NAME(pCon,"pCon");
	HX_MARK_MEMBER_NAME(pInt,"pInt");
	HX_MARK_MEMBER_NAME(pWis,"pWis");
	HX_MARK_MEMBER_NAME(pCha,"pCha");
	HX_MARK_MEMBER_NAME(pCoordinate,"pCoordinate");
	HX_MARK_END_CLASS();
}

void TablePlayer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pName,"pName");
	HX_VISIT_MEMBER_NAME(pAge,"pAge");
	HX_VISIT_MEMBER_NAME(pClass,"pClass");
	HX_VISIT_MEMBER_NAME(pHp,"pHp");
	HX_VISIT_MEMBER_NAME(pMp,"pMp");
	HX_VISIT_MEMBER_NAME(pStr,"pStr");
	HX_VISIT_MEMBER_NAME(pDex,"pDex");
	HX_VISIT_MEMBER_NAME(pCon,"pCon");
	HX_VISIT_MEMBER_NAME(pInt,"pInt");
	HX_VISIT_MEMBER_NAME(pWis,"pWis");
	HX_VISIT_MEMBER_NAME(pCha,"pCha");
	HX_VISIT_MEMBER_NAME(pCoordinate,"pCoordinate");
}

hx::Val TablePlayer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pHp") ) { return hx::Val( pHp ); }
		if (HX_FIELD_EQ(inName,"pMp") ) { return hx::Val( pMp ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pAge") ) { return hx::Val( pAge ); }
		if (HX_FIELD_EQ(inName,"pStr") ) { return hx::Val( pStr ); }
		if (HX_FIELD_EQ(inName,"pDex") ) { return hx::Val( pDex ); }
		if (HX_FIELD_EQ(inName,"pCon") ) { return hx::Val( pCon ); }
		if (HX_FIELD_EQ(inName,"pInt") ) { return hx::Val( pInt ); }
		if (HX_FIELD_EQ(inName,"pWis") ) { return hx::Val( pWis ); }
		if (HX_FIELD_EQ(inName,"pCha") ) { return hx::Val( pCha ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pName") ) { return hx::Val( pName ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pClass") ) { return hx::Val( pClass ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pCoordinate") ) { return hx::Val( pCoordinate ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TablePlayer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pHp") ) { pHp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pMp") ) { pMp=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pAge") ) { pAge=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pStr") ) { pStr=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pDex") ) { pDex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pCon") ) { pCon=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pInt") ) { pInt=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pWis") ) { pWis=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pCha") ) { pCha=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pName") ) { pName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pClass") ) { pClass=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pCoordinate") ) { pCoordinate=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TablePlayer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pName","\xdb","\x96","\xb9","\xb0"));
	outFields->push(HX_HCSTRING("pAge","\x2f","\x92","\x39","\x4a"));
	outFields->push(HX_HCSTRING("pClass","\xa8","\x51","\x7e","\xa3"));
	outFields->push(HX_HCSTRING("pHp","\x98","\x3b","\x55","\x00"));
	outFields->push(HX_HCSTRING("pMp","\xf3","\x3f","\x55","\x00"));
	outFields->push(HX_HCSTRING("pStr","\x21","\x46","\x47","\x4a"));
	outFields->push(HX_HCSTRING("pDex","\x47","\xd7","\x3b","\x4a"));
	outFields->push(HX_HCSTRING("pCon","\xb2","\x1d","\x3b","\x4a"));
	outFields->push(HX_HCSTRING("pInt","\x5f","\xaa","\x3f","\x4a"));
	outFields->push(HX_HCSTRING("pWis","\x91","\x45","\x4a","\x4a"));
	outFields->push(HX_HCSTRING("pCha","\x8c","\x17","\x3b","\x4a"));
	outFields->push(HX_HCSTRING("pCoordinate","\x08","\xa7","\xa9","\x36"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TablePlayer_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TablePlayer_obj,pName),HX_HCSTRING("pName","\xdb","\x96","\xb9","\xb0")},
	{hx::fsInt,(int)offsetof(TablePlayer_obj,pAge),HX_HCSTRING("pAge","\x2f","\x92","\x39","\x4a")},
	{hx::fsString,(int)offsetof(TablePlayer_obj,pClass),HX_HCSTRING("pClass","\xa8","\x51","\x7e","\xa3")},
	{hx::fsInt,(int)offsetof(TablePlayer_obj,pHp),HX_HCSTRING("pHp","\x98","\x3b","\x55","\x00")},
	{hx::fsInt,(int)offsetof(TablePlayer_obj,pMp),HX_HCSTRING("pMp","\xf3","\x3f","\x55","\x00")},
	{hx::fsInt,(int)offsetof(TablePlayer_obj,pStr),HX_HCSTRING("pStr","\x21","\x46","\x47","\x4a")},
	{hx::fsInt,(int)offsetof(TablePlayer_obj,pDex),HX_HCSTRING("pDex","\x47","\xd7","\x3b","\x4a")},
	{hx::fsInt,(int)offsetof(TablePlayer_obj,pCon),HX_HCSTRING("pCon","\xb2","\x1d","\x3b","\x4a")},
	{hx::fsInt,(int)offsetof(TablePlayer_obj,pInt),HX_HCSTRING("pInt","\x5f","\xaa","\x3f","\x4a")},
	{hx::fsInt,(int)offsetof(TablePlayer_obj,pWis),HX_HCSTRING("pWis","\x91","\x45","\x4a","\x4a")},
	{hx::fsInt,(int)offsetof(TablePlayer_obj,pCha),HX_HCSTRING("pCha","\x8c","\x17","\x3b","\x4a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TablePlayer_obj,pCoordinate),HX_HCSTRING("pCoordinate","\x08","\xa7","\xa9","\x36")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TablePlayer_obj_sStaticStorageInfo = 0;
#endif

static ::String TablePlayer_obj_sMemberFields[] = {
	HX_HCSTRING("pName","\xdb","\x96","\xb9","\xb0"),
	HX_HCSTRING("pAge","\x2f","\x92","\x39","\x4a"),
	HX_HCSTRING("pClass","\xa8","\x51","\x7e","\xa3"),
	HX_HCSTRING("pHp","\x98","\x3b","\x55","\x00"),
	HX_HCSTRING("pMp","\xf3","\x3f","\x55","\x00"),
	HX_HCSTRING("pStr","\x21","\x46","\x47","\x4a"),
	HX_HCSTRING("pDex","\x47","\xd7","\x3b","\x4a"),
	HX_HCSTRING("pCon","\xb2","\x1d","\x3b","\x4a"),
	HX_HCSTRING("pInt","\x5f","\xaa","\x3f","\x4a"),
	HX_HCSTRING("pWis","\x91","\x45","\x4a","\x4a"),
	HX_HCSTRING("pCha","\x8c","\x17","\x3b","\x4a"),
	HX_HCSTRING("pCoordinate","\x08","\xa7","\xa9","\x36"),
	::String(null()) };

static void TablePlayer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TablePlayer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TablePlayer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TablePlayer_obj::__mClass,"__mClass");
};

#endif

hx::Class TablePlayer_obj::__mClass;

void TablePlayer_obj::__register()
{
	hx::Object *dummy = new TablePlayer_obj;
	TablePlayer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("orphadb.TablePlayer","\xa5","\xc1","\xb4","\x75");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TablePlayer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TablePlayer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TablePlayer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TablePlayer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TablePlayer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TablePlayer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace orphadb
